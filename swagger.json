
{
  "openapi": "3.0.0",
  "info": {
    "title": "WaterTracker",
    "description": "",
    "version": "1.0.8"
  },
  "servers": [
    {
      "url": "https://watertracker-t8-backend.onrender.com"
    },
    {
      "url": "http://localhost:3000",
      "description": "Local server"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "User",
      "description": "User basic information"
    },
    {
      "name": "Waters",
      "description": "Waters endpoints"
    }
  ],
  "paths": {
    "/api/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User registration",
        "requestBody": {
          "description": "Registration user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "New user is created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or Empty body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorConflictResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User login",
        "requestBody": {
          "description": "Login user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error or Empty body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User logout",
        "description": "Logout user",
        "responses": {
          "204": {
            "description": "User logout successfully"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorUnauthorizedResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
  "/api/user/avatars": {
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "User's avatar",
        "requestBody": {
          "description": "Add  user avatar",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UserAvatarRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User avatar is add success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAvatarResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorBadRequestResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorConflictResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/user/current": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "User's info",
        "description": "Get user info",
        "responses": {
          "200": {
            "description": "All information about user",
            "content": {
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "User's update info",
        "requestBody": {
          "description": "User's new info",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateInfoRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The user data change was successful",
            "content": {
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorNotFoundResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/api/user": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "User delete",
        "description": "Delete user account",
        "responses": {
          "204": {
            "description": "User account delete successfully"
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    }},
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "pattern": "allow:[com, net]",
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "maximum": 64,
            "minimum": 8,
            "type": "string",
            "description": "User's password",
            "format": "password",
            "example": "qwerty12345"
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "201"
          },
          "message": {
            "type": "string",
            "description": "New user is created"
          }
        }
      },
      "LoginResponse": {
        "required": [
          "token"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Login UserEmail successful"
          },
          "token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY2MGMxNDYxNGM1MGRiMTNjNjk1N2MxMiIsImlhdCI6MTcxMjA2NzcyMiwiZXhwIjoxNzEyMTUwNTIyfQ.dftMsB6Sz2bzb5HEYmGWRgM9G3tAdTXVH0rYrxW4b6U"
          }
        }
      },
      "LogoutRequest": {
        "required": [
          "token"
        ],
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "User's token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY2MGMxNDYxNGM1MGRiMTNjNjk1N2MxMiIsImlhdCI6MTcxMjA2NzcyMiwiZXhwIjoxNzEyMTUwNTIyfQ.dftMsB6Sz2bzb5HEYmGWRgM9G3tAdTXVH0rYrxW4b6U"
          }
        }
      },
      "UserAvatarRequest": {
        "type": "object",
        "properties": {
          "avatarURL": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "UserAvatarResponse": {
        "type": "object",
        "properties": {
          "avatarURL": {
            "type": "string",
            "nullable": true,
            "example": "https://res.cloudinary.com/dwlu2h8dv/image/upload/v1712338141/avatars/660dc04170132ea38d6dc147_IMG_3308.JPG.jpg"
          }
        }
      },
      "UserInfoResponse": {
        "type": "object",
        "properties": {
          "avatarURL": {
            "type": "string",
            "description": "Unique avatar of the user",
            "example": "https://res.cloudinary.com/dwlu2h8dv/image/upload/v1712338141/avatars/660dc04170132ea38d6dc147_IMG_3308.JPG.jpg"
          },
          "email": {
            "type": "string",
            "description": "User's email"
          },
          "name": {
            "type": "string",
            "example": "UserName",
            "default": "email"
          },
          "gender": {
            "type": "string",
            "nullable": true,
            "example": "female",
            "enum": [
              "male",
              "female"
            ]
          },
          "waterRate": {
            "maximum": 15000,
            "minimum": 0,
            "type": "number"
          },
          "verify": {
            "type": "boolean"
          }
        }
      },
      "UserUpdateInfoRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's display name"
          },
          "email": {
            "pattern": "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "outdatedPassword": {
            "maxLength": 64,
            "minLength": 8,
            "type": "string",
            "description": "User's old password"
          },
          "newPassword": {
            "maxLength": 64,
            "minLength": 8,
            "type": "string",
            "description": "User's password"
          },
          "gender": {
            "type": "string",
            "description": "User's gender",
            "enum": [
              "male",
              "female"
            ]
          }
        }
      },
      "errorBadRequestResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "400"
          },
          "message": {
            "type": "string",
            "description": "Error message"
          }
        }
      },
      "errorConflictResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "409"
          },
          "message": {
            "type": "string",
            "description": "Email in use"
          }
        }
      },
      "errorUnauthorizedResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "401"
          },
          "message": {
            "type": "string",
            "description": "Not authorized"
          }
        }
      },
      "errorNotFoundResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "404"
          },
          "message": {
            "type": "string",
            "description": "Not found"
          }
        }
      },
      "errorServerResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "500"
          },
          "message": {
            "type": "string",
            "description": "Server error"
          }
        }
      }
    }
    }
  }
    
  
